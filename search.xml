<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springboot整合Poi导出excel（简单版）</title>
      <link href="/2020/03/29/Springboot%E6%95%B4%E5%90%88Poi%E5%AF%BC%E5%87%BAexcel%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/"/>
      <url>/2020/03/29/Springboot%E6%95%B4%E5%90%88Poi%E5%AF%BC%E5%87%BAexcel%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一-问题引入"><a href="#一-问题引入" class="headerlink" title="一. 问题引入"></a>一. 问题引入</h1><p>博客专栏：</p><ul><li><p><a href="https://blog.csdn.net/qq_35180973/article/details/89785699">Springboot整合Poi导出excel（简单版）</a></p></li><li><p><a href="https://blog.csdn.net/qq_35180973/article/details/105173750">Springboot整合Poi导出excel（注解版）</a></p><p><strong>总所周知Springboot是一个功能强大的微服务框架，集成了很多优秀的Spring组件，但是却没有支持Excel导出的插件。为此我们引入Poi插件。场景是导出Controller返回的Json数据，输出到二维表格。设置表头及其他设置可参考Poi中文文档。本教程试用简单导出Excel，通俗易懂。</strong></p><h2 id="1-首先从中央仓库中导入架包Poi3-14以及Poi-ooxml3-14"><a href="#1-首先从中央仓库中导入架包Poi3-14以及Poi-ooxml3-14" class="headerlink" title="1. 首先从中央仓库中导入架包Poi3.14以及Poi-ooxml3.14."></a>1. 首先从中央仓库中导入架包Poi3.14以及Poi-ooxml3.14.</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.14&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.14&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-编写工具类"><a href="#2-编写工具类" class="headerlink" title="2.编写工具类"></a>2.编写工具类</h2><p>编写用于导出Excel的工具类ExportExcelUtils，工具类可以直接使用，不需要更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">package org.emall.website.util;</span><br><span class="line"></span><br><span class="line">import org.apache.poi.hssf.usermodel.*;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author created by Zhangdazhuang</span><br><span class="line"> * @version v.0.1</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @date 2019/4/7</span><br><span class="line"> * @备注</span><br><span class="line"> **/</span><br><span class="line">public class ExportExcelUtils &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(ExportExcelUtils.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 导出Excel</span><br><span class="line">     *</span><br><span class="line">     * @param excelName 要导出的excel名称</span><br><span class="line">     * @param list      要导出的数据集合</span><br><span class="line">     * @param fieldMap  中英文字段对应Map，即要导出的excel表头</span><br><span class="line">     * @param response  使用response可以导出到浏览器</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; void export(String excelName, List&lt;T&gt; list, LinkedHashMap&lt;String, String&gt; fieldMap, HttpServletResponse response) &#123;</span><br><span class="line"></span><br><span class="line">        // 设置默认文件名为当前时间：年月日时分秒</span><br><span class="line">        if (excelName == null || excelName == &quot;&quot;) &#123;</span><br><span class="line">            excelName = new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;).format(</span><br><span class="line">                    new Date()).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置response头信息</span><br><span class="line">        response.reset();</span><br><span class="line">        response.setContentType(&quot;application/vnd.ms-excel&quot;); // 改成输出excel文件</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setHeader(&quot;Content-disposition&quot;, &quot;attachment; filename=&quot;</span><br><span class="line">                    + new String(excelName.getBytes(&quot;gb2312&quot;), &quot;ISO-8859-1&quot;) + &quot;.xls&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            logger.info(e1.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //创建一个WorkBook,对应一个Excel文件</span><br><span class="line">            HSSFWorkbook wb = new HSSFWorkbook();</span><br><span class="line">            //在Workbook中，创建一个sheet，对应Excel中的工作薄（sheet）</span><br><span class="line">            HSSFSheet sheet = wb.createSheet(excelName);</span><br><span class="line">            //创建单元格，并设置值表头 设置表头居中</span><br><span class="line">            HSSFCellStyle style = wb.createCellStyle();</span><br><span class="line">            //创建一个居中格式</span><br><span class="line">            style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">            // 填充工作表</span><br><span class="line">            fillSheet(sheet, list, fieldMap, style);</span><br><span class="line"></span><br><span class="line">            //将文件输出</span><br><span class="line">            OutputStream ouputStream = response.getOutputStream();</span><br><span class="line">            wb.write(ouputStream);</span><br><span class="line">            ouputStream.flush();</span><br><span class="line">            ouputStream.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.info(&quot;导出Excel失败！&quot;);</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据字段名获取字段对象</span><br><span class="line">     *</span><br><span class="line">     * @param fieldName 字段名</span><br><span class="line">     * @param clazz     包含该字段的类</span><br><span class="line">     * @return 字段</span><br><span class="line">     */</span><br><span class="line">    public static Field getFieldByName(String fieldName, Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        logger.info(&quot;根据字段名获取字段对象:getFieldByName()&quot;);</span><br><span class="line">        // 拿到本类的所有字段</span><br><span class="line">        Field[] selfFields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        // 如果本类中存在该字段，则返回</span><br><span class="line">        for (Field field : selfFields) &#123;</span><br><span class="line">            //如果本类中存在该字段，则返回</span><br><span class="line">            if (field.getName().equals(fieldName)) &#123;</span><br><span class="line">                return field;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 否则，查看父类中是否存在此字段，如果有则返回</span><br><span class="line">        Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class="line">        if (superClazz != null &amp;&amp; superClazz != Object.class) &#123;</span><br><span class="line">            //递归</span><br><span class="line">            return getFieldByName(fieldName, superClazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果本类和父类都没有，则返回空</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据字段名获取字段值</span><br><span class="line">     *</span><br><span class="line">     * @param fieldName 字段名</span><br><span class="line">     * @param o         对象</span><br><span class="line">     * @return 字段值</span><br><span class="line">     * @throws Exception 异常</span><br><span class="line">     */</span><br><span class="line">    public static Object getFieldValueByName(String fieldName, Object o)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;根据字段名获取字段值:getFieldValueByName()&quot;);</span><br><span class="line">        Object value = null;</span><br><span class="line">        //根据字段名得到字段对象</span><br><span class="line">        Field field = getFieldByName(fieldName, o.getClass());</span><br><span class="line"></span><br><span class="line">        //如果该字段存在，则取出该字段的值</span><br><span class="line">        if (field != null) &#123;</span><br><span class="line">            field.setAccessible(true);//类中的成员变量为private,在类外边使用属性值，故必须进行此操作</span><br><span class="line">            value = field.get(o);//获取当前对象中当前Field的value</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new Exception(o.getClass().getSimpleName() + &quot;类不存在字段名 &quot;</span><br><span class="line">                    + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据带路径或不带路径的属性名获取属性值,即接受简单属性名，</span><br><span class="line">     * 如userName等，又接受带路径的属性名，如student.department.name等</span><br><span class="line">     *</span><br><span class="line">     * @param fieldNameSequence 带路径的属性名或简单属性名</span><br><span class="line">     * @param o                 对象</span><br><span class="line">     * @return 属性值</span><br><span class="line">     * @throws Exception 异常</span><br><span class="line">     */</span><br><span class="line">    public static Object getFieldValueByNameSequence(String fieldNameSequence,</span><br><span class="line">                                                     Object o) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;根据带路径或不带路径的属性名获取属性值,即接受简单属性名:getFieldValueByNameSequence()&quot;);</span><br><span class="line">        Object value = null;</span><br><span class="line"></span><br><span class="line">        // 将fieldNameSequence进行拆分</span><br><span class="line">        String[] attributes = fieldNameSequence.split(&quot;\\.&quot;);</span><br><span class="line">        if (attributes.length == 1) &#123;</span><br><span class="line">            value = getFieldValueByName(fieldNameSequence, o);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 根据数组中第一个连接属性名获取连接属性对象，如student.department.name</span><br><span class="line">            Object fieldObj = getFieldValueByName(attributes[0], o);</span><br><span class="line">            //截取除第一个属性名之后的路径</span><br><span class="line">            String subFieldNameSequence = fieldNameSequence</span><br><span class="line">                    .substring(fieldNameSequence.indexOf(&quot;.&quot;) + 1);</span><br><span class="line">            //递归得到最终的属性对象的值</span><br><span class="line">            value = getFieldValueByNameSequence(subFieldNameSequence, fieldObj);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向工作表中填充数据</span><br><span class="line">     *</span><br><span class="line">     * @param sheet    excel的工作表名称</span><br><span class="line">     * @param list     数据源</span><br><span class="line">     * @param fieldMap 中英文字段对应关系的Map</span><br><span class="line">     * @param style    表格中的格式</span><br><span class="line">     * @throws Exception 异常</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; void fillSheet(HSSFSheet sheet, List&lt;T&gt; list,</span><br><span class="line">                                     LinkedHashMap&lt;String, String&gt; fieldMap, HSSFCellStyle style) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;向工作表中填充数据:fillSheet()&quot;);</span><br><span class="line">        // 定义存放英文字段名和中文字段名的数组</span><br><span class="line">        String[] enFields = new String[fieldMap.size()];</span><br><span class="line">        String[] cnFields = new String[fieldMap.size()];</span><br><span class="line"></span><br><span class="line">        // 填充数组</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (Map.Entry&lt;String, String&gt; entry : fieldMap.entrySet()) &#123;</span><br><span class="line">            enFields[count] = entry.getKey();</span><br><span class="line">            cnFields[count] = entry.getValue();</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short</span><br><span class="line">        HSSFRow row = sheet.createRow((int) 0);</span><br><span class="line"></span><br><span class="line">        // 填充表头</span><br><span class="line">        for (int i = 0; i &lt; cnFields.length; i++) &#123;</span><br><span class="line">            HSSFCell cell = row.createCell(i);</span><br><span class="line">            cell.setCellValue(cnFields[i]);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line">            sheet.autoSizeColumn(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 填充内容</span><br><span class="line">        for (int index = 0; index &lt; list.size(); index++) &#123;</span><br><span class="line">            row = sheet.createRow(index + 1);</span><br><span class="line">            // 获取单个对象</span><br><span class="line">            T item = list.get(index);</span><br><span class="line">            for (int i = 0; i &lt; enFields.length; i++) &#123;</span><br><span class="line">                Object objValue = getFieldValueByNameSequence(enFields[i], item);</span><br><span class="line">                String fieldValue = objValue == null ? &quot;&quot; : objValue.toString();</span><br><span class="line"></span><br><span class="line">                row.createCell(i).setCellValue(fieldValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-编写实体类"><a href="#3-编写实体类" class="headerlink" title="3.编写实体类"></a>3.编写实体类</h2><p>  需要输出到Excel的实体表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package org.emall.website.entity;</span><br><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author created by Zhangdazhuang</span><br><span class="line"> * @version v.0.1</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @date 2019/4/7</span><br><span class="line"> * @备注</span><br><span class="line"> **/</span><br><span class="line">public class Excel &#123;</span><br><span class="line">    private BigInteger id;</span><br><span class="line">    private String order_number;</span><br><span class="line">    private String amount_real;</span><br><span class="line">    private String date_add;</span><br><span class="line">    private String status_str;</span><br><span class="line">    private String link_man;</span><br><span class="line">    private String mobie;</span><br><span class="line">    private String address;</span><br><span class="line">    private String detailValue;</span><br><span class="line"></span><br><span class="line">    public Excel() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Excel(BigInteger id, String order_number, String amount_real, String date_add, String status_str, String link_man, String mobie, String address, String detailValue) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.order_number = order_number;</span><br><span class="line">        this.amount_real = amount_real;</span><br><span class="line">        this.date_add = date_add;</span><br><span class="line">        this.status_str = status_str;</span><br><span class="line">        this.link_man = link_man;</span><br><span class="line">        this.mobie = mobie;</span><br><span class="line">        this.address = address;</span><br><span class="line">        this.detailValue = detailValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigInteger getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(BigInteger id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getOrder_number() &#123;</span><br><span class="line">        return order_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrder_number(String order_number) &#123;</span><br><span class="line">        this.order_number = order_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAmount_real() &#123;</span><br><span class="line">        return amount_real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAmount_real(String amount_real) &#123;</span><br><span class="line">        this.amount_real = amount_real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDate_add() &#123;</span><br><span class="line">        return date_add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDate_add(String date_add) &#123;</span><br><span class="line">        this.date_add = date_add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStatus_str() &#123;</span><br><span class="line">        return status_str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus_str(String status_str) &#123;</span><br><span class="line">        this.status_str = status_str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLink_man() &#123;</span><br><span class="line">        return link_man;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLink_man(String link_man) &#123;</span><br><span class="line">        this.link_man = link_man;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMobie() &#123;</span><br><span class="line">        return mobie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMobie(String mobie) &#123;</span><br><span class="line">        this.mobie = mobie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDetailValue() &#123;</span><br><span class="line">        return detailValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDetailValue(String detailValue) &#123;</span><br><span class="line">        this.detailValue = detailValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-编写控制层即得到Json数据"><a href="#4-编写控制层即得到Json数据" class="headerlink" title="4.编写控制层即得到Json数据"></a>4.编写控制层即得到Json数据</h2><p>   <strong>编写控制层ExcelController，注意fieldMap.put(“实体类属性名”,”Excel中显示的属性名”); 设置实体属性名和数据库中对应。如果得不到数据对应不上，请采用ResultMap设置或者用Select XX（数据库名）As 实体属性名</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package org.emall.website.controller;</span><br><span class="line"></span><br><span class="line">import org.emall.website.entity.Excel;</span><br><span class="line">import org.emall.website.entity.Order;</span><br><span class="line">import org.emall.website.service.OrderService;</span><br><span class="line">import org.emall.website.util.ExportExcelUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author created by Zhangdazhuang</span><br><span class="line"> * @version v.0.1</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @date 2019/4/7</span><br><span class="line"> * @备注</span><br><span class="line"> **/</span><br><span class="line">@Controller</span><br><span class="line">public class ExcelController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HttpServletRequest request;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/excel/exportBankCheckInfo&quot;,method = RequestMethod.GET)</span><br><span class="line">    public void ExportBankCkeckInfo(HttpServletResponse response, HttpServletRequest request)&#123;</span><br><span class="line">          //这里是笔者实际业务需求中需要得到时间间隔。可忽略</span><br><span class="line">        String start=request.getParameter(&quot;start&quot;);</span><br><span class="line">        String end=request.getParameter(&quot;end&quot;);</span><br><span class="line">        System.out.println(&quot;打印的起始日期为：&quot;+start+&quot;，打印的结束日期为：&quot;+end);</span><br><span class="line">        //得到所有要导出的数据</span><br><span class="line">        List&lt;Excel&gt; orderlist =orderService.listexcel(start,end);</span><br><span class="line">        //定义导出的excel名字</span><br><span class="line">        String excelName = &quot;订单详情表&quot;;</span><br><span class="line"></span><br><span class="line">        //获取需要转出的excel表头的map字段</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; fieldMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        fieldMap.put(&quot;id&quot;,&quot;编号&quot;);</span><br><span class="line">        fieldMap.put(&quot;link_man&quot;,&quot;姓名&quot;);</span><br><span class="line">        fieldMap.put(&quot;amount_real&quot;,&quot;价格&quot;);</span><br><span class="line">        fieldMap.put(&quot;date_add&quot;,&quot;日期&quot;);</span><br><span class="line">        fieldMap.put(&quot;status_str&quot;,&quot;订单状态&quot;);</span><br><span class="line">        fieldMap.put(&quot;mobie&quot;,&quot;收货电话&quot;);</span><br><span class="line">        fieldMap.put(&quot;address&quot;,&quot;地址&quot;);</span><br><span class="line">        fieldMap.put(&quot;detailValue&quot;,&quot;订单详情&quot;);</span><br><span class="line"></span><br><span class="line">        //导出用户相关信息</span><br><span class="line">        new ExportExcelUtils().export(excelName,orderlist,fieldMap,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5.验证"></a>5.验证</h1><p>在导出工具类中，通过HttpServletResponse response设置输出为Excel。所以通过Controller层的Url可以直接得到URL。保存位置是保存在浏览器的默认保存位置，因为是下载请求。<br>（如果要保存到任意位置，则需要把输出改为流）。<br>输入请求 <a href="http://127.0.0.1:8080/excel/exportBankCheckInfo">127.0.0.1:8080/(可选项目名)/excel/exportBankCheckInfo</a></p><p>最后查看导出的Excel格式如下：<br><img src="https://img-blog.csdnimg.cn/20190503105417415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTgwOTcz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里只是简单实现了Excel的导入，通过Poi插件或者其他开源的插件可以对导入导出Excel做更加功能丰富的操作，详情请移步CSDN或者github。欢迎加入Q群959706394，大家一起学习交流编程知识，解决实际业务需求中各种需求。</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>欢迎通过一下渠道，交流学习。<br><a href="https://github.com/codingxin">github</a><br><a href="#">Q群959706394</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Poi导出excel（注解版）</title>
      <link href="/2020/03/29/Springboot%E6%95%B4%E5%90%88Poi%E5%AF%BC%E5%87%BAexcel%EF%BC%88%E6%B3%A8%E8%A7%A3%E7%89%88%EF%BC%89/"/>
      <url>/2020/03/29/Springboot%E6%95%B4%E5%90%88Poi%E5%AF%BC%E5%87%BAexcel%EF%BC%88%E6%B3%A8%E8%A7%A3%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>博客专栏：</p><ul><li><a href="https://blog.csdn.net/qq_35180973/article/details/89785699">Springboot整合Poi导出excel（简单版）</a></li><li><a href="https://blog.csdn.net/qq_35180973/article/details/105173750">Springboot整合Poi导出excel（注解版）</a></li></ul><p>上文提到通过poi简单导出Excel后，很多读者反应需要解决导出自适应和设置各种样式，并且频繁导出需要写各种map导致代码过于繁琐。故笔者借鉴了一下自定义注解的写法，提供一种简介又快速的导出Excel方法。</p><span id="more"></span><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><p>  和上文中提到的依赖一样，只不过添加了<a href="https://baike.baidu.com/item/Lombok/23780246?fr=aladdin">lombok</a>插件简化了代码,可按需要导入这个插件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2.自定义注解"></a>2.自定义注解</h2><p>  为了避免和上文一样频繁的用map来注入数据，导致方法复用难，这里引入<a href="https://baike.baidu.com/item/%E6%B3%A8%E8%A7%A3/22344968">自定义注解</a>。首先定义注解，有两个属性，一个是数据库中列名，另一个是java中实体属性名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.emall.website.anno;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> created by zhangxin27695</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ExportEntityMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020-03-23 8:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExportEntityMap &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">EnName</span><span class="params">()</span> <span class="keyword">default</span> &quot;数据库列名&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">CnName</span><span class="params">()</span> <span class="keyword">default</span> &quot;实体映射名&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-定义实体"><a href="#3-定义实体" class="headerlink" title="3.定义实体"></a>3.定义实体</h2><p>在需要导出的实体上添加自定义注解，因为poi导出的map操作就是为了映射列名和属性名之间的关系：<strong>Excel对应的列头和对应的属数据库列名是写死的，如Excel的姓名对应的属性名是name，数据库中是name，poi设置map为（”name”，“姓名”）。频繁的map操作设置的是静态的数据，如下图。为了能够复用数据，所以编写自定义注解，简化代码。</strong><br><img src="https://img-blog.csdnimg.cn/20200329101423311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTgwOTcz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：@Data是lombok注解，可以自动创建get，set方法和构造方法，具体可参考网上lombok详细适用方法。如果没有引入，可以自己创建get，set方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.emall.website.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.emall.website.anno.ExportEntityMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> created by zhangxin27695</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ExportDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020-03-23 9:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigInteger id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String order_number;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;价格&quot;,EnName=&quot;amount_real&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String amount_real;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;日期&quot;,EnName=&quot;date_add&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String date_add;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;订单状态&quot;,EnName=&quot;status_str&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String status_str;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;姓名&quot;,EnName=&quot;link_man&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String link_man;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;收货电话&quot;,EnName=&quot;mobie&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;地址&quot;,EnName=&quot;address&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExportEntityMap(CnName=&quot;订单详情&quot;,EnName=&quot;detailValue&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String detailValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-创建导出工具类"><a href="#4-创建导出工具类" class="headerlink" title="4.创建导出工具类"></a>4.创建导出工具类</h2><p>其中主要关注Export方法，包括以下几个知识点：</p><ul><li>设置文件名</li><li>设置文件格式</li><li>创建workBook，对应一个excel文件</li><li>在workbook中创建一个sheet，对应excel中的sheet（原理相当于java的swing，在画布上添加控件）</li><li>设置边距，页眉，页脚</li><li>设置打印方向，缩放，纸张大小</li><li>创建单元格，设置表头和表头居中</li><li>设置居中和字体</li><li>自定义注解操作</li><li>文件输出<br>其中最重要的是对自定义注解的操作：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环注解里面的值 填入Link集合</span></span><br><span class="line">Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">    <span class="comment">//获取注解对象</span></span><br><span class="line">    ExportEntityMap declaredAnnotation = declaredField.getDeclaredAnnotation(ExportEntityMap.class);</span><br><span class="line">    <span class="keyword">if</span> (declaredAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fieldMap.put(declaredAnnotation.EnName(), declaredAnnotation.CnName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fillSheet 方法是封装的导入数据方法，可以不做任何修改。</p><p>完整代码ExportExcelUtils2 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.emall.website.util;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Footer;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Header;</span><br><span class="line"><span class="keyword">import</span> org.emall.website.anno.ExportEntityMap;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> : ExportExcelUtils2 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : ASUS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/3/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportExcelUtils2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// private static final Logger logger = LoggerFactory.getLogger(ExportUtil.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Excel</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelName 要导出的excel名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      要导出的数据集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c  中英文字段对应Map，即要导出的excel表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response  使用response可以导出到浏览器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">export</span><span class="params">(String excelName, List&lt;T&gt; list, Class&lt;T&gt; c, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH：mm：ss&quot;</span>);<span class="comment">// 设置日期格式</span></span><br><span class="line">        <span class="comment">// 设置默认文件名为当前时间：年月日时分秒</span></span><br><span class="line">        <span class="keyword">if</span> (excelName == <span class="keyword">null</span> || excelName == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            excelName = df.format(<span class="keyword">new</span> Date()).toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            excelName = excelName + df.format(<span class="keyword">new</span> Date()).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置response头信息</span></span><br><span class="line">        response.reset();</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>); <span class="comment">// 改成输出excel文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span></span><br><span class="line">                    + <span class="keyword">new</span> String(excelName.getBytes(<span class="string">&quot;gb2312&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>) + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            <span class="comment">//logger.info(e1.getMessage());</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个WorkBook,对应一个Excel文件</span></span><br><span class="line">            HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            <span class="comment">//在Workbook中，创建一个sheet，对应Excel中的工作薄（sheet）</span></span><br><span class="line">            HSSFSheet sheet = wb.createSheet(excelName);</span><br><span class="line">            <span class="comment">//设置 边距、页眉、页脚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            HSSFPrintSetup printSetup = (HSSFPrintSetup) sheet.getPrintSetup();</span></span><br><span class="line">            HSSFPrintSetup printSetup = sheet.getPrintSetup();</span><br><span class="line">            <span class="comment">//// 打印方向，true：横向，false：纵向(默认)</span></span><br><span class="line">            printSetup.setLandscape(<span class="keyword">true</span>);</span><br><span class="line">            printSetup.setHeaderMargin(<span class="number">0.2</span>);</span><br><span class="line">            printSetup.setFooterMargin(<span class="number">0.2</span>);</span><br><span class="line">            <span class="comment">//设置打印缩放为88%</span></span><br><span class="line">            <span class="comment">//printSetup.setScale((short) 55);</span></span><br><span class="line">            printSetup.setFitHeight((<span class="keyword">short</span>) <span class="number">0</span>);</span><br><span class="line">            printSetup.setFitWidth((<span class="keyword">short</span>) <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// printSetup.setLeftToRight(true);//列从左向右显示②</span></span><br><span class="line">            printSetup.setPaperSize(HSSFPrintSetup.A4_PAPERSIZE); <span class="comment">// 纸张</span></span><br><span class="line">            sheet.setMargin(HSSFSheet.BottomMargin, (<span class="keyword">double</span>) <span class="number">0.8</span>);<span class="comment">// 页边距（下）</span></span><br><span class="line">            sheet.setMargin(HSSFSheet.LeftMargin, (<span class="keyword">double</span>) <span class="number">0</span>);<span class="comment">// 页边距（左）</span></span><br><span class="line">            sheet.setMargin(HSSFSheet.RightMargin, (<span class="keyword">double</span>) <span class="number">0</span>);<span class="comment">// 页边距（右）</span></span><br><span class="line">            sheet.setMargin(HSSFSheet.TopMargin, (<span class="keyword">double</span>) <span class="number">0.8</span>);<span class="comment">// 页边距（上）</span></span><br><span class="line">            sheet.setHorizontallyCenter(<span class="keyword">true</span>);<span class="comment">//设置打印页面为水平居中</span></span><br><span class="line">            sheet.setVerticallyCenter(<span class="keyword">true</span>);</span><br><span class="line">            sheet.setAutobreaks(<span class="keyword">false</span>);</span><br><span class="line">            sheet.setFitToPage(<span class="keyword">false</span>);</span><br><span class="line">            Footer footer = sheet.getFooter();</span><br><span class="line">            <span class="comment">//设置页数</span></span><br><span class="line">            footer.setCenter(<span class="string">&quot;第&quot;</span> + HeaderFooter.page() + <span class="string">&quot;页，共 &quot;</span> + HeaderFooter.numPages() + <span class="string">&quot;页&quot;</span>);</span><br><span class="line">            Header header = sheet.getHeader();</span><br><span class="line">            <span class="comment">//自定义页眉,并设置页眉 左中右显示信息</span></span><br><span class="line">            <span class="comment">//居中</span></span><br><span class="line"><span class="comment">//            header.setCenter(&quot;Center Header&quot;);</span></span><br><span class="line">            <span class="comment">//靠左</span></span><br><span class="line">            header.setLeft(HSSFHeader.font(<span class="string">&quot;宋体&quot;</span>, <span class="string">&quot;&quot;</span>) +</span><br><span class="line">                    HSSFHeader.fontSize((<span class="keyword">short</span>) <span class="number">16</span>) + excelName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">            <span class="comment">//靠右</span></span><br><span class="line"><span class="comment">//            header.setRight(HSSFHeader.font(&quot;Stencil-Normal&quot;, &quot;Italic&quot;) +</span></span><br><span class="line"><span class="comment">//                    HSSFHeader.fontSize((short) 16) + &quot;Right w/ Stencil-Normal Italic font and size 16&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建单元格，并设置值表头 设置表头居中</span></span><br><span class="line">            HSSFCellStyle style = wb.createCellStyle();</span><br><span class="line">            <span class="comment">//设置边框</span></span><br><span class="line">            style.setBorderBottom(HSSFCellStyle.BORDER_THIN); <span class="comment">//下边框</span></span><br><span class="line">            style.setBorderLeft(HSSFCellStyle.BORDER_THIN);<span class="comment">//左边框</span></span><br><span class="line">            style.setBorderTop(HSSFCellStyle.BORDER_THIN);<span class="comment">//上边框</span></span><br><span class="line">            style.setBorderRight(HSSFCellStyle.BORDER_THIN);<span class="comment">//右边框</span></span><br><span class="line">            <span class="comment">//自动换行</span></span><br><span class="line">            <span class="comment">//style.setWrapText(true);</span></span><br><span class="line">            <span class="comment">//创建一个居中格式</span></span><br><span class="line">            style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">//上下居中</span></span><br><span class="line">            <span class="comment">//设置字体</span></span><br><span class="line">            HSSFFont font = wb.createFont();</span><br><span class="line">            font.setFontName(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line"></span><br><span class="line">            style.setFont(font);</span><br><span class="line">            <span class="comment">// 填充工作表</span></span><br><span class="line">            <span class="comment">//获取需要转出的excel表头的map字段</span></span><br><span class="line">            LinkedHashMap&lt;String, String&gt; fieldMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//循环注解里面的值 填入Link集合</span></span><br><span class="line">            Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">                <span class="comment">//获取注解对象</span></span><br><span class="line">                ExportEntityMap declaredAnnotation = declaredField.getDeclaredAnnotation(ExportEntityMap.class);</span><br><span class="line">                <span class="keyword">if</span> (declaredAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fieldMap.put(declaredAnnotation.EnName(), declaredAnnotation.CnName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            fillSheet(sheet, list, fieldMap, style);</span><br><span class="line">            <span class="comment">//将文件输出</span></span><br><span class="line">            OutputStream ouputStream = response.getOutputStream();</span><br><span class="line">            wb.write(ouputStream);</span><br><span class="line">            ouputStream.flush();</span><br><span class="line">            ouputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;导出Excel失败！&quot;</span>);</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据字段名获取字段对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName 字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz     包含该字段的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getFieldByName</span><span class="params">(String fieldName, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//logger.info(&quot;根据字段名获取字段对象:getFieldByName()&quot;);</span></span><br><span class="line">        <span class="comment">// 拿到本类的所有字段</span></span><br><span class="line">        Field[] selfFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 如果本类中存在该字段，则返回</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : selfFields) &#123;</span><br><span class="line">            <span class="comment">//如果本类中存在该字段，则返回</span></span><br><span class="line">            <span class="keyword">if</span> (field.getName().equals(fieldName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则，查看父类中是否存在此字段，如果有则返回</span></span><br><span class="line">        Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (superClazz != <span class="keyword">null</span> &amp;&amp; superClazz != Object.class) &#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            <span class="keyword">return</span> getFieldByName(fieldName, superClazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果本类和父类都没有，则返回空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据字段名获取字段值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName 字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o         对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValueByName</span><span class="params">(String fieldName, Object o)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//logger.info(&quot;根据字段名获取字段值:getFieldValueByName()&quot;);</span></span><br><span class="line">        Object value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//根据字段名得到字段对象</span></span><br><span class="line">        Field field = getFieldByName(fieldName, o.getClass());</span><br><span class="line">        <span class="comment">//如果该字段存在，则取出该字段的值</span></span><br><span class="line">        <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);<span class="comment">//类中的成员变量为private,在类外边使用属性值，故必须进行此操作</span></span><br><span class="line">            value = field.get(o);<span class="comment">//获取当前对象中当前Field的value</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(o.getClass().getSimpleName() + <span class="string">&quot;类不存在字段名 &quot;</span></span><br><span class="line">                    + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据带路径或不带路径的属性名获取属性值,即接受简单属性名，</span></span><br><span class="line"><span class="comment">     * 如userName等，又接受带路径的属性名，如student.department.name等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldNameSequence 带路径的属性名或简单属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o                 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValueByNameSequence</span><span class="params">(String fieldNameSequence,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                     Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info(&quot;根据带路径或不带路径的属性名获取属性值,即接受简单属性名:getFieldValueByNameSequence()&quot;);</span></span><br><span class="line">        Object value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将fieldNameSequence进行拆分</span></span><br><span class="line">        String[] attributes = fieldNameSequence.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (attributes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            value = getFieldValueByName(fieldNameSequence, o);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据数组中第一个连接属性名获取连接属性对象，如student.department.name</span></span><br><span class="line">            Object fieldObj = getFieldValueByName(attributes[<span class="number">0</span>], o);</span><br><span class="line">            <span class="comment">//截取除第一个属性名之后的路径</span></span><br><span class="line">            String subFieldNameSequence = fieldNameSequence</span><br><span class="line">                    .substring(fieldNameSequence.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//递归得到最终的属性对象的值</span></span><br><span class="line">            value = getFieldValueByNameSequence(subFieldNameSequence, fieldObj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向工作表中填充数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheet    excel的工作表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list     数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldMap 中英文字段对应关系的Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> style    表格中的格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fillSheet</span><span class="params">(HSSFSheet sheet, List&lt;T&gt; list,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     LinkedHashMap&lt;String, String&gt; fieldMap, HSSFCellStyle style)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//logger.info(&quot;向工作表中填充数据:fillSheet()&quot;);</span></span><br><span class="line">        <span class="comment">// 定义存放英文字段名和中文字段名的数组</span></span><br><span class="line">        String[] enFields = <span class="keyword">new</span> String[fieldMap.size()];</span><br><span class="line">        String[] cnFields = <span class="keyword">new</span> String[fieldMap.size()];</span><br><span class="line">        <span class="comment">// 填充数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : fieldMap.entrySet()) &#123;</span><br><span class="line">            enFields[count] = entry.getKey();</span><br><span class="line">            cnFields[count] = entry.getValue();</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储最大列宽</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; maxWidth = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HSSFRow row = sheet.createRow((<span class="keyword">int</span>) <span class="number">0</span>);</span><br><span class="line">        HSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 填充表头</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnFields.length; i++) &#123;</span><br><span class="line">            cell = row.createCell(i);</span><br><span class="line">            cell.setCellValue(cnFields[i]);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line">            sheet.autoSizeColumn(i);</span><br><span class="line">            <span class="comment">//设置自适应宽高</span></span><br><span class="line">            maxWidth.put(i, cell.getStringCellValue().getBytes().length * <span class="number">256</span> + <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 填充内容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; list.size(); index++) &#123;</span><br><span class="line">            row = sheet.createRow(index + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 获取单个对象</span></span><br><span class="line">            T item = list.get(index);</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; enFields.length; i++) &#123;</span><br><span class="line">                HSSFCell createCell = row.createCell(j);</span><br><span class="line">                Object objValue = getFieldValueByNameSequence(enFields[i], item);</span><br><span class="line">                String fieldValue = objValue == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : objValue.toString();</span><br><span class="line">                cell = row.createCell(i);</span><br><span class="line">                createCell.setCellValue(fieldValue);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> length = createCell.getStringCellValue().getBytes().length * <span class="number">256</span> + <span class="number">200</span>;</span><br><span class="line">                <span class="comment">//这里把宽度最大限制到15000</span></span><br><span class="line">                <span class="keyword">if</span> (length &gt; <span class="number">15000</span>) &#123;</span><br><span class="line">                    length = <span class="number">15000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxWidth.put(j, Math.max(length, maxWidth.get(j)));</span><br><span class="line">                j++;</span><br><span class="line">                createCell.setCellStyle(style);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列宽自适应</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnFields.length; i++) &#123;</span><br><span class="line">            sheet.setColumnWidth(i,maxWidth.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-控制层调用"><a href="#5-控制层调用" class="headerlink" title="5.控制层调用"></a>5.控制层调用</h2><p>首先通过调用自己的业务代码，得到list数据。ExportExcelUtils2有四个参数，包括<br>excel名字，数据list，导出实体类的class，和HttpServletResponse请求。可以看下上文的控制层需要多次map导入列名，导致复用不便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/excel/exportBankCheckInfo&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExportBankCkeckInfo2</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到所有要导出的数据</span></span><br><span class="line">    List&lt;ExportDto&gt; orderlist = orderService.listexcel2(start, end);</span><br><span class="line">    <span class="comment">//定义导出的excel名字</span></span><br><span class="line">    String excelName = <span class="string">&quot;订单详情表&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出用户相关信息</span></span><br><span class="line">    <span class="keyword">new</span> ExportExcelUtils2().export(excelName, orderlist, ExportDto.class, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   通过注解和poi导出excel，易于操作，可复用性强。如果需要导入新的数据，只需要新建实体类，并加上自定义注解。最后在控制层，分别得到需要的list调用封装的工具类方法得到导出excel。最后导出来的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200329104652168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTgwOTcz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>欢迎通过一下渠道，交流学习。<br><a href="https://github.com/codingxin">github</a><br><a href="#">Q群959706394</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
